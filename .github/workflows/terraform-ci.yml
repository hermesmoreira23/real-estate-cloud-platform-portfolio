# GitHub Actions Workflow: Terraform CI
# - Valida y planifica la infraestructura definida en los módulos de Terraform.
# - Se ejecuta en cada push o pull request hacia la rama "main".

name: Terraform CI
# Disparadores del workflow:
# - Ejecuta este pipeline en cada push a "main" o pull request contra "main".
on:
  push:
    branches:
      - main
  pull_request:

# Primer Job: Terraform completo para el entorno de desarrollo (módulo completo)
jobs:
  terraform:
    name: Terraform Validate & Plan                               # Nombre del job
    runs-on: ubuntu-latest                                        # Ejecuta sobre una máquina Linux
    # Variables de entorno (credenciales y región AWS)
    env:
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:    eu-west-1

    steps:
    # Paso 1: Clona el código del repositorio
      - name: Checkout code
        uses: actions/checkout@v3
# Paso 2: Imprime las variables de entorno (para depuración)
      - name: Print AWS env (debug)
        run: |
          echo "AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID"
          echo "AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY"
          echo "AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION"
# Paso 3: Instala Terraform en la máquina runner
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
# Paso 4: Limpia el caché de Terraform (evita conflictos entre ejecuciones)
      - name: Clean Terraform cache
        run: rm -rf .terraform .terraform.lock.hcl
        working-directory: terraform
# Paso 5: Inicializa el directorio de Terraform sin backend
      - name: Terraform Init
        run: terraform init
        working-directory: terraform
# Paso 6: Valida la sintaxis y estructura de la configuración Terraform
      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform
# Paso 7: Ejecuta el plan de infraestructura completo (modo no interactivo)
# - Define explícitamente todas las variables para evitar dependencias externas
      - name: Terraform Plan
        run: |
          terraform plan \
            -var 'aws_region=eu-west-1' \
            -var 'public_subnet_id=subnet-12345678' \
            -var 'key_name=my-key' \
            -var 'security_group_id=sg-12345678' \
            -var 'ec2_role_name=my-ec2-role' \
            -var 'private_subnet_ids=["subnet-87654321"]' \
            -var 'db_security_group_id=sg-87654321' \
            -var 'db_name=mydb' \
            -var 'db_username=admin' \
            -var 'db_password=changeme' \
            -var 'ec2_instance_id=i-12345678' \
            -var 'vpc_id=vpc-12345678' \
            -var 'my_ip_cidr=1.2.3.4/32' \
            -var 'bucket_name=my-unique-bucket-123' \
            -var 'project_tag=RealEstateCloud' \
            -var 'environment=dev' \
            -var 'vpc_cidr_block=10.0.0.0/16' \
            -var 'public_subnet_cidr=10.0.1.0/24' \
            -var 'availability_zone=eu-west-1a' \
            -var 'vpc_name=free-tier-vpc' \
            -var 'subnet_name=free-tier-public-subnet-1' \
            -var 'private_subnet_cidr=10.0.2.0/24' \
            -var 'db_allocated_storage=20' \
            -var 'db_instance_class=db.t3.micro' \
            -var 'db_engine_version=15.4'
        working-directory: terraform
# Segundo Job: Terraform Plan para el módulo "db-only"
  terraform-db-plan:
    name: Terraform DB Module Plan (cost-free)
    runs-on: ubuntu-latest
    needs: terraform                                                # Espera a que termine el job anterior  
    env:
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:    eu-west-1
# Configura la carpeta de trabajo predeterminada del módulo "db-only"
    defaults:
      run:
        working-directory: terraform/db-only

    steps:
# Paso 1: Clona el repositorio
      - name: Checkout code
        uses: actions/checkout@v3
# Paso 2: Instala Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
# Paso 3: Limpia archivos de estado o lock antiguos
      - name: Clean Terraform cache
        run: rm -rf .terraform .terraform.lock.hcl
# Paso 4: Inicializa Terraform sin backend (modo local para pruebas)
      - name: Terraform Init (no backend)
        run: terraform init -backend=false
# Paso 5: Ejecuta un `terraform plan` exclusivo del módulo de base de datos
      - name: Terraform Plan DB sandbox
        run: terraform plan




        


        