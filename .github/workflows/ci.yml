# Workflow principal para CI/CD en GitHub Actions
# - Ejecuta validaciones de Terraform.
# - Construye y sube imagen Docker a ECR.
# - Corre tests de FastAPI usando PostgreSQL en contenedor.


name: Terraform & App CI

# Este workflow se ejecuta:
# - Cuando se hace push a la rama main
# - Cuando se crea un pull request hacia main
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # - Inicializa y valida la configuración de Terraform.
  # - Ejecuta el plan sin aplicar cambios (solo validación).
jobs:
  terraform:
    name: Terraform Init & Plan
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:    eu-west-1
      TF_VAR_db_username:    ${{ secrets.TF_VAR_DB_USERNAME }}
      TF_VAR_db_password:    ${{ secrets.TF_VAR_DB_PASSWORD }}

    defaults:
      run:
        working-directory: terraform

# Clona el repositorio
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
# Instala Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      # Elimina caché previa para evitar errores
      - name: Clean Terraform cache
        run: rm -rf .terraform .terraform.lock.hcl
# Inicializa Terraform y actualiza estado sin backend remoto
      - name: Terraform Init + Refresh
        run: |
          terraform init -backend=false
          terraform refresh -input=false -lock=false
# Valida la sintaxis y estructura del código Terraform
      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -no-color

# Job: Docker Build
  # - Construye la imagen Docker y la sube a ECR.
  # - Depende del job 'terraform' para completarse.
  docker-build:
    name: Build, Tag & Push Docker Image to ECR
    runs-on: ubuntu-latest
    needs: terraform
    env:
      AWS_REGION: eu-west-1

# Clona el repositorio
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

# Configura credenciales AWS para el job
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

# Construye la imagen Docker desde app/Dockerfile
      - name: Build Docker image
        run: |
          docker build \
            --file app/Dockerfile \
            --tag real-estate-app:latest \
            .
# Autenticación con el registro de ECR
      - name: Login to Amazon ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          aws ecr get-login-password --region $AWS_REGION \
            | docker login \
              --username AWS \
              --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

# Etiqueta la imagen con el SHA del commit y la sube a ECR
      - name: Tag & push image to ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGISTRY=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          IMAGE_URI=$REGISTRY/real-estate-app:${{ github.sha }}
          docker tag real-estate-app:latest $IMAGE_URI
          docker push $IMAGE_URI

# Job: App Test
  # - Ejecuta tests de FastAPI con pytest.
  # - Lanza un contenedor PostgreSQL para pruebas.
  app-test:
    name: FastAPI App Tests
    runs-on: ubuntu-latest
    needs: docker-build

    env:
      PYTHONPATH:                 ${{ github.workspace }}/app
      DB_HOST:                    localhost
      DB_USER:                    ${{ secrets.TF_VAR_DB_USERNAME }}
      DB_PASSWORD:                ${{ secrets.TF_VAR_DB_PASSWORD }}
      POSTGRES_HOST_AUTH_METHOD:  trust
      DB_NAME:                    realestate
      DB_PORT:                    5432

# Servicio de base de datos PostgreSQL para test local
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_USER:               ${{ secrets.TF_VAR_DB_USERNAME }}
          POSTGRES_PASSWORD:           ${{ secrets.TF_VAR_DB_PASSWORD }}
          POSTGRES_DB:                 realestate
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U $POSTGRES_USER -d realestate"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

# Configura Python y dependencias
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt pytest black flake8

# Verifica formato del código con Black
      - name: Check formatting with Black
        run: black --check .

# Linting con Flake8
      - name: Lint with Flake8
        run: flake8 .
# Prueba de conexión a la base de datos
      - name: Test DB Connection
        working-directory: app
        run: |
          python - <<EOF
          import os, sys
          sys.path.insert(0, "")
          from db_config import engine
          conn = engine.connect()
          conn.close()
          print("✅ Conexión a la base de datos OK")
          EOF

      - name: Run tests
        run: pytest tests

# Job opcional (comentado): Despliegue en ECS Fargate
# - Se activará cuando complete la automatización de despliegue con apply.
  # ecs-deploy:
#   name: Deploy to ECS Fargate
#   runs-on: ubuntu-latest
#   needs: docker-build
#   env:
#     AWS_REGION: eu-west-1
#
#   steps:
#     - name: Checkout code
#       uses: actions/checkout@v3
#
#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v2
#       with:
#         aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region:            ${{ env.AWS_REGION }}
#
#     - name: Update ECS service
#       run: |
#         aws ecs update-service \
#           --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
#           --service ${{ secrets.ECS_SERVICE_NAME }} \
#           --force-new-deployment \
#           --region ${{ env.AWS_REGION }}





            










